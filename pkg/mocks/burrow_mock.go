// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repo/burrow.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	ent "gophernet/pkg/db/ent"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIBurrowRepository is a mock of IBurrowRepository interface.
type MockIBurrowRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIBurrowRepositoryMockRecorder
}

// MockIBurrowRepositoryMockRecorder is the mock recorder for MockIBurrowRepository.
type MockIBurrowRepositoryMockRecorder struct {
	mock *MockIBurrowRepository
}

// NewMockIBurrowRepository creates a new mock instance.
func NewMockIBurrowRepository(ctrl *gomock.Controller) *MockIBurrowRepository {
	mock := &MockIBurrowRepository{ctrl: ctrl}
	mock.recorder = &MockIBurrowRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBurrowRepository) EXPECT() *MockIBurrowRepositoryMockRecorder {
	return m.recorder
}

// CreateBurrow mocks base method.
func (m *MockIBurrowRepository) CreateBurrow(ctx context.Context, name string, depth, width float64, isOccupied bool, age int) (*ent.Burrow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBurrow", ctx, name, depth, width, isOccupied, age)
	ret0, _ := ret[0].(*ent.Burrow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBurrow indicates an expected call of CreateBurrow.
func (mr *MockIBurrowRepositoryMockRecorder) CreateBurrow(ctx, name, depth, width, isOccupied, age interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBurrow", reflect.TypeOf((*MockIBurrowRepository)(nil).CreateBurrow), ctx, name, depth, width, isOccupied, age)
}

// CreateBurrows mocks base method.
func (m *MockIBurrowRepository) CreateBurrows(ctx context.Context, burrows []*ent.Burrow) ([]*ent.Burrow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBurrows", ctx, burrows)
	ret0, _ := ret[0].([]*ent.Burrow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBurrows indicates an expected call of CreateBurrows.
func (mr *MockIBurrowRepositoryMockRecorder) CreateBurrows(ctx, burrows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBurrows", reflect.TypeOf((*MockIBurrowRepository)(nil).CreateBurrows), ctx, burrows)
}

// DeleteAllBurrows mocks base method.
func (m *MockIBurrowRepository) DeleteAllBurrows(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllBurrows", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllBurrows indicates an expected call of DeleteAllBurrows.
func (mr *MockIBurrowRepositoryMockRecorder) DeleteAllBurrows(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllBurrows", reflect.TypeOf((*MockIBurrowRepository)(nil).DeleteAllBurrows), ctx)
}

// DeleteBurrow mocks base method.
func (m *MockIBurrowRepository) DeleteBurrow(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBurrow", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBurrow indicates an expected call of DeleteBurrow.
func (mr *MockIBurrowRepositoryMockRecorder) DeleteBurrow(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBurrow", reflect.TypeOf((*MockIBurrowRepository)(nil).DeleteBurrow), ctx, id)
}

// GetAllBurrows mocks base method.
func (m *MockIBurrowRepository) GetAllBurrows(ctx context.Context) ([]*ent.Burrow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBurrows", ctx)
	ret0, _ := ret[0].([]*ent.Burrow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBurrows indicates an expected call of GetAllBurrows.
func (mr *MockIBurrowRepositoryMockRecorder) GetAllBurrows(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBurrows", reflect.TypeOf((*MockIBurrowRepository)(nil).GetAllBurrows), ctx)
}

// GetBurrowByID mocks base method.
func (m *MockIBurrowRepository) GetBurrowByID(ctx context.Context, id int) (*ent.Burrow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBurrowByID", ctx, id)
	ret0, _ := ret[0].(*ent.Burrow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBurrowByID indicates an expected call of GetBurrowByID.
func (mr *MockIBurrowRepositoryMockRecorder) GetBurrowByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBurrowByID", reflect.TypeOf((*MockIBurrowRepository)(nil).GetBurrowByID), ctx, id)
}

// GetOccupiedBurrows mocks base method.
func (m *MockIBurrowRepository) GetOccupiedBurrows(ctx context.Context) ([]*ent.Burrow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOccupiedBurrows", ctx)
	ret0, _ := ret[0].([]*ent.Burrow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOccupiedBurrows indicates an expected call of GetOccupiedBurrows.
func (mr *MockIBurrowRepositoryMockRecorder) GetOccupiedBurrows(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOccupiedBurrows", reflect.TypeOf((*MockIBurrowRepository)(nil).GetOccupiedBurrows), ctx)
}

// UpdateBurrowDepth mocks base method.
func (m *MockIBurrowRepository) UpdateBurrowDepth(ctx context.Context, id int64, depth float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBurrowDepth", ctx, id, depth)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBurrowDepth indicates an expected call of UpdateBurrowDepth.
func (mr *MockIBurrowRepositoryMockRecorder) UpdateBurrowDepth(ctx, id, depth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBurrowDepth", reflect.TypeOf((*MockIBurrowRepository)(nil).UpdateBurrowDepth), ctx, id, depth)
}

// UpdateBurrowOccupancy mocks base method.
func (m *MockIBurrowRepository) UpdateBurrowOccupancy(ctx context.Context, id int, isOccupied bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBurrowOccupancy", ctx, id, isOccupied)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBurrowOccupancy indicates an expected call of UpdateBurrowOccupancy.
func (mr *MockIBurrowRepositoryMockRecorder) UpdateBurrowOccupancy(ctx, id, isOccupied interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBurrowOccupancy", reflect.TypeOf((*MockIBurrowRepository)(nil).UpdateBurrowOccupancy), ctx, id, isOccupied)
}
