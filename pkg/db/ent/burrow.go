// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gophernet/pkg/db/ent/burrow"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Burrow is the model entity for the Burrow schema.
type Burrow struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name of the burrow
	Name string `json:"name,omitempty"`
	// Current depth of the burrow in meters
	Depth float64 `json:"depth,omitempty"`
	// Width of the burrow in meters
	Width float64 `json:"width,omitempty"`
	// Whether the burrow is currently occupied
	IsOccupied bool `json:"is_occupied,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Burrow) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case burrow.FieldIsOccupied:
			values[i] = new(sql.NullBool)
		case burrow.FieldDepth, burrow.FieldWidth:
			values[i] = new(sql.NullFloat64)
		case burrow.FieldID, burrow.FieldAge:
			values[i] = new(sql.NullInt64)
		case burrow.FieldName:
			values[i] = new(sql.NullString)
		case burrow.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Burrow fields.
func (b *Burrow) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case burrow.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case burrow.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				b.Name = value.String
			}
		case burrow.FieldDepth:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field depth", values[i])
			} else if value.Valid {
				b.Depth = value.Float64
			}
		case burrow.FieldWidth:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[i])
			} else if value.Valid {
				b.Width = value.Float64
			}
		case burrow.FieldIsOccupied:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_occupied", values[i])
			} else if value.Valid {
				b.IsOccupied = value.Bool
			}
		case burrow.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				b.Age = int(value.Int64)
			}
		case burrow.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				b.UpdatedAt = value.Time
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Burrow.
// This includes values selected through modifiers, order, etc.
func (b *Burrow) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// Update returns a builder for updating this Burrow.
// Note that you need to call Burrow.Unwrap() before calling this method if this Burrow
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Burrow) Update() *BurrowUpdateOne {
	return NewBurrowClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Burrow entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Burrow) Unwrap() *Burrow {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Burrow is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Burrow) String() string {
	var builder strings.Builder
	builder.WriteString("Burrow(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("name=")
	builder.WriteString(b.Name)
	builder.WriteString(", ")
	builder.WriteString("depth=")
	builder.WriteString(fmt.Sprintf("%v", b.Depth))
	builder.WriteString(", ")
	builder.WriteString("width=")
	builder.WriteString(fmt.Sprintf("%v", b.Width))
	builder.WriteString(", ")
	builder.WriteString("is_occupied=")
	builder.WriteString(fmt.Sprintf("%v", b.IsOccupied))
	builder.WriteString(", ")
	builder.WriteString("age=")
	builder.WriteString(fmt.Sprintf("%v", b.Age))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(b.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Burrows is a parsable slice of Burrow.
type Burrows []*Burrow
