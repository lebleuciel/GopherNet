// Code generated by ent, DO NOT EDIT.

package burrow

import (
	"gophernet/pkg/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Burrow {
	return predicate.Burrow(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Burrow {
	return predicate.Burrow(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Burrow {
	return predicate.Burrow(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Burrow {
	return predicate.Burrow(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Burrow {
	return predicate.Burrow(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Burrow {
	return predicate.Burrow(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Burrow {
	return predicate.Burrow(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Burrow {
	return predicate.Burrow(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Burrow {
	return predicate.Burrow(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Burrow {
	return predicate.Burrow(sql.FieldEQ(FieldName, v))
}

// Depth applies equality check predicate on the "depth" field. It's identical to DepthEQ.
func Depth(v float64) predicate.Burrow {
	return predicate.Burrow(sql.FieldEQ(FieldDepth, v))
}

// Width applies equality check predicate on the "width" field. It's identical to WidthEQ.
func Width(v float64) predicate.Burrow {
	return predicate.Burrow(sql.FieldEQ(FieldWidth, v))
}

// IsOccupied applies equality check predicate on the "is_occupied" field. It's identical to IsOccupiedEQ.
func IsOccupied(v bool) predicate.Burrow {
	return predicate.Burrow(sql.FieldEQ(FieldIsOccupied, v))
}

// Age applies equality check predicate on the "age" field. It's identical to AgeEQ.
func Age(v int) predicate.Burrow {
	return predicate.Burrow(sql.FieldEQ(FieldAge, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Burrow {
	return predicate.Burrow(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Burrow {
	return predicate.Burrow(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Burrow {
	return predicate.Burrow(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Burrow {
	return predicate.Burrow(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Burrow {
	return predicate.Burrow(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Burrow {
	return predicate.Burrow(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Burrow {
	return predicate.Burrow(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Burrow {
	return predicate.Burrow(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Burrow {
	return predicate.Burrow(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Burrow {
	return predicate.Burrow(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Burrow {
	return predicate.Burrow(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Burrow {
	return predicate.Burrow(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Burrow {
	return predicate.Burrow(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Burrow {
	return predicate.Burrow(sql.FieldContainsFold(FieldName, v))
}

// DepthEQ applies the EQ predicate on the "depth" field.
func DepthEQ(v float64) predicate.Burrow {
	return predicate.Burrow(sql.FieldEQ(FieldDepth, v))
}

// DepthNEQ applies the NEQ predicate on the "depth" field.
func DepthNEQ(v float64) predicate.Burrow {
	return predicate.Burrow(sql.FieldNEQ(FieldDepth, v))
}

// DepthIn applies the In predicate on the "depth" field.
func DepthIn(vs ...float64) predicate.Burrow {
	return predicate.Burrow(sql.FieldIn(FieldDepth, vs...))
}

// DepthNotIn applies the NotIn predicate on the "depth" field.
func DepthNotIn(vs ...float64) predicate.Burrow {
	return predicate.Burrow(sql.FieldNotIn(FieldDepth, vs...))
}

// DepthGT applies the GT predicate on the "depth" field.
func DepthGT(v float64) predicate.Burrow {
	return predicate.Burrow(sql.FieldGT(FieldDepth, v))
}

// DepthGTE applies the GTE predicate on the "depth" field.
func DepthGTE(v float64) predicate.Burrow {
	return predicate.Burrow(sql.FieldGTE(FieldDepth, v))
}

// DepthLT applies the LT predicate on the "depth" field.
func DepthLT(v float64) predicate.Burrow {
	return predicate.Burrow(sql.FieldLT(FieldDepth, v))
}

// DepthLTE applies the LTE predicate on the "depth" field.
func DepthLTE(v float64) predicate.Burrow {
	return predicate.Burrow(sql.FieldLTE(FieldDepth, v))
}

// WidthEQ applies the EQ predicate on the "width" field.
func WidthEQ(v float64) predicate.Burrow {
	return predicate.Burrow(sql.FieldEQ(FieldWidth, v))
}

// WidthNEQ applies the NEQ predicate on the "width" field.
func WidthNEQ(v float64) predicate.Burrow {
	return predicate.Burrow(sql.FieldNEQ(FieldWidth, v))
}

// WidthIn applies the In predicate on the "width" field.
func WidthIn(vs ...float64) predicate.Burrow {
	return predicate.Burrow(sql.FieldIn(FieldWidth, vs...))
}

// WidthNotIn applies the NotIn predicate on the "width" field.
func WidthNotIn(vs ...float64) predicate.Burrow {
	return predicate.Burrow(sql.FieldNotIn(FieldWidth, vs...))
}

// WidthGT applies the GT predicate on the "width" field.
func WidthGT(v float64) predicate.Burrow {
	return predicate.Burrow(sql.FieldGT(FieldWidth, v))
}

// WidthGTE applies the GTE predicate on the "width" field.
func WidthGTE(v float64) predicate.Burrow {
	return predicate.Burrow(sql.FieldGTE(FieldWidth, v))
}

// WidthLT applies the LT predicate on the "width" field.
func WidthLT(v float64) predicate.Burrow {
	return predicate.Burrow(sql.FieldLT(FieldWidth, v))
}

// WidthLTE applies the LTE predicate on the "width" field.
func WidthLTE(v float64) predicate.Burrow {
	return predicate.Burrow(sql.FieldLTE(FieldWidth, v))
}

// IsOccupiedEQ applies the EQ predicate on the "is_occupied" field.
func IsOccupiedEQ(v bool) predicate.Burrow {
	return predicate.Burrow(sql.FieldEQ(FieldIsOccupied, v))
}

// IsOccupiedNEQ applies the NEQ predicate on the "is_occupied" field.
func IsOccupiedNEQ(v bool) predicate.Burrow {
	return predicate.Burrow(sql.FieldNEQ(FieldIsOccupied, v))
}

// AgeEQ applies the EQ predicate on the "age" field.
func AgeEQ(v int) predicate.Burrow {
	return predicate.Burrow(sql.FieldEQ(FieldAge, v))
}

// AgeNEQ applies the NEQ predicate on the "age" field.
func AgeNEQ(v int) predicate.Burrow {
	return predicate.Burrow(sql.FieldNEQ(FieldAge, v))
}

// AgeIn applies the In predicate on the "age" field.
func AgeIn(vs ...int) predicate.Burrow {
	return predicate.Burrow(sql.FieldIn(FieldAge, vs...))
}

// AgeNotIn applies the NotIn predicate on the "age" field.
func AgeNotIn(vs ...int) predicate.Burrow {
	return predicate.Burrow(sql.FieldNotIn(FieldAge, vs...))
}

// AgeGT applies the GT predicate on the "age" field.
func AgeGT(v int) predicate.Burrow {
	return predicate.Burrow(sql.FieldGT(FieldAge, v))
}

// AgeGTE applies the GTE predicate on the "age" field.
func AgeGTE(v int) predicate.Burrow {
	return predicate.Burrow(sql.FieldGTE(FieldAge, v))
}

// AgeLT applies the LT predicate on the "age" field.
func AgeLT(v int) predicate.Burrow {
	return predicate.Burrow(sql.FieldLT(FieldAge, v))
}

// AgeLTE applies the LTE predicate on the "age" field.
func AgeLTE(v int) predicate.Burrow {
	return predicate.Burrow(sql.FieldLTE(FieldAge, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Burrow {
	return predicate.Burrow(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Burrow {
	return predicate.Burrow(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Burrow {
	return predicate.Burrow(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Burrow {
	return predicate.Burrow(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Burrow {
	return predicate.Burrow(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Burrow {
	return predicate.Burrow(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Burrow {
	return predicate.Burrow(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Burrow {
	return predicate.Burrow(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Burrow) predicate.Burrow {
	return predicate.Burrow(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Burrow) predicate.Burrow {
	return predicate.Burrow(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Burrow) predicate.Burrow {
	return predicate.Burrow(sql.NotPredicates(p))
}
