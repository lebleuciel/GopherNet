// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gophernet/pkg/db/ent/burrow"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BurrowCreate is the builder for creating a Burrow entity.
type BurrowCreate struct {
	config
	mutation *BurrowMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (bc *BurrowCreate) SetName(s string) *BurrowCreate {
	bc.mutation.SetName(s)
	return bc
}

// SetDepth sets the "depth" field.
func (bc *BurrowCreate) SetDepth(f float64) *BurrowCreate {
	bc.mutation.SetDepth(f)
	return bc
}

// SetNillableDepth sets the "depth" field if the given value is not nil.
func (bc *BurrowCreate) SetNillableDepth(f *float64) *BurrowCreate {
	if f != nil {
		bc.SetDepth(*f)
	}
	return bc
}

// SetWidth sets the "width" field.
func (bc *BurrowCreate) SetWidth(f float64) *BurrowCreate {
	bc.mutation.SetWidth(f)
	return bc
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (bc *BurrowCreate) SetNillableWidth(f *float64) *BurrowCreate {
	if f != nil {
		bc.SetWidth(*f)
	}
	return bc
}

// SetIsOccupied sets the "is_occupied" field.
func (bc *BurrowCreate) SetIsOccupied(b bool) *BurrowCreate {
	bc.mutation.SetIsOccupied(b)
	return bc
}

// SetNillableIsOccupied sets the "is_occupied" field if the given value is not nil.
func (bc *BurrowCreate) SetNillableIsOccupied(b *bool) *BurrowCreate {
	if b != nil {
		bc.SetIsOccupied(*b)
	}
	return bc
}

// SetAge sets the "age" field.
func (bc *BurrowCreate) SetAge(i int) *BurrowCreate {
	bc.mutation.SetAge(i)
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BurrowCreate) SetUpdatedAt(t time.Time) *BurrowCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetID sets the "id" field.
func (bc *BurrowCreate) SetID(i int) *BurrowCreate {
	bc.mutation.SetID(i)
	return bc
}

// Mutation returns the BurrowMutation object of the builder.
func (bc *BurrowCreate) Mutation() *BurrowMutation {
	return bc.mutation
}

// Save creates the Burrow in the database.
func (bc *BurrowCreate) Save(ctx context.Context) (*Burrow, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BurrowCreate) SaveX(ctx context.Context) *Burrow {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BurrowCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BurrowCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BurrowCreate) defaults() {
	if _, ok := bc.mutation.Depth(); !ok {
		v := burrow.DefaultDepth
		bc.mutation.SetDepth(v)
	}
	if _, ok := bc.mutation.Width(); !ok {
		v := burrow.DefaultWidth
		bc.mutation.SetWidth(v)
	}
	if _, ok := bc.mutation.IsOccupied(); !ok {
		v := burrow.DefaultIsOccupied
		bc.mutation.SetIsOccupied(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BurrowCreate) check() error {
	if _, ok := bc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Burrow.name"`)}
	}
	if _, ok := bc.mutation.Depth(); !ok {
		return &ValidationError{Name: "depth", err: errors.New(`ent: missing required field "Burrow.depth"`)}
	}
	if _, ok := bc.mutation.Width(); !ok {
		return &ValidationError{Name: "width", err: errors.New(`ent: missing required field "Burrow.width"`)}
	}
	if _, ok := bc.mutation.IsOccupied(); !ok {
		return &ValidationError{Name: "is_occupied", err: errors.New(`ent: missing required field "Burrow.is_occupied"`)}
	}
	if _, ok := bc.mutation.Age(); !ok {
		return &ValidationError{Name: "age", err: errors.New(`ent: missing required field "Burrow.age"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Burrow.updated_at"`)}
	}
	if v, ok := bc.mutation.ID(); ok {
		if err := burrow.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Burrow.id": %w`, err)}
		}
	}
	return nil
}

func (bc *BurrowCreate) sqlSave(ctx context.Context) (*Burrow, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BurrowCreate) createSpec() (*Burrow, *sqlgraph.CreateSpec) {
	var (
		_node = &Burrow{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(burrow.Table, sqlgraph.NewFieldSpec(burrow.FieldID, field.TypeInt))
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.Name(); ok {
		_spec.SetField(burrow.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bc.mutation.Depth(); ok {
		_spec.SetField(burrow.FieldDepth, field.TypeFloat64, value)
		_node.Depth = value
	}
	if value, ok := bc.mutation.Width(); ok {
		_spec.SetField(burrow.FieldWidth, field.TypeFloat64, value)
		_node.Width = value
	}
	if value, ok := bc.mutation.IsOccupied(); ok {
		_spec.SetField(burrow.FieldIsOccupied, field.TypeBool, value)
		_node.IsOccupied = value
	}
	if value, ok := bc.mutation.Age(); ok {
		_spec.SetField(burrow.FieldAge, field.TypeInt, value)
		_node.Age = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(burrow.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// BurrowCreateBulk is the builder for creating many Burrow entities in bulk.
type BurrowCreateBulk struct {
	config
	err      error
	builders []*BurrowCreate
}

// Save creates the Burrow entities in the database.
func (bcb *BurrowCreateBulk) Save(ctx context.Context) ([]*Burrow, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Burrow, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BurrowMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BurrowCreateBulk) SaveX(ctx context.Context) []*Burrow {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BurrowCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BurrowCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
